# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fa0H1b3ZtbL12oYbD_7cntjB7R9j4s_5
"""

#Importing libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

#Import Datasets
house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

#Convert to the Pandas DataFrame
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns=house_price_dataset.feature_names)

house_price_dataframe.head(5)

#Add houses prices to the dataframe
house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.shape

house_price_dataframe.head(5)

#Have any missing values
house_price_dataframe.isnull().sum()

# statistical measures of the dataset
house_price_dataframe.describe()

#Identify the correlation to analyze the dataset
correlation = house_price_dataframe.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

#Split the data X and Y
X = house_price_dataframe.drop(['price'], axis=1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training using **XGBoost** Regressor"""

#load the model
model = XGBRegressor()

#training the data.
model.fit(X_train, Y_train)

# accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

print(training_data_prediction)

#Visualizing the actual Prices and predicted prices 
plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

#prediction on test data
test_data_prediction = model.predict(X_test)

print(test_data_prediction)